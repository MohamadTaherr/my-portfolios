'use client';

import { useState } from 'react';

interface VideoProject {
  _id: string;
  title: string;
  description: string;
  client: string;
  category: string;
  duration: string;
  year: string;
  tags: string[];
  videoUrl?: string;
  thumbnailUrl?: string;
  featured: boolean;
}

interface ProjectsClientProps {
  projects: VideoProject[];
}

// Categories dynamically generated from projects

export default function ProjectsClient({ projects }: ProjectsClientProps) {
  const [activeCategory, setActiveCategory] = useState('All');
  const [selectedProject, setSelectedProject] = useState<VideoProject | null>(null);

  const filteredProjects =
    activeCategory === 'All'
      ? projects
      : projects.filter((project) => project.category === activeCategory);

  return (
    <>
      {/* Cinematic Filter Tabs */}
      <div className="flex flex-wrap justify-center gap-2 mb-16">
        {categories.map((category) => (
          <button
            key={category}
            onClick={() => setActiveCategory(category)}
            className={`px-8 py-3 font-[family-name:var(--font-playfair)] text-sm tracking-wider uppercase transition-all duration-500 ${
              activeCategory === category
                ? 'text-gold border-b-2 border-gold'
                : 'text-ivory/50 hover:text-ivory/80'
            }`}
          >
            {category}
          </button>
        ))}
      </div>

      {/* Cinematic Project Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredProjects.length === 0 ? (
          <div className="col-span-full text-center py-20">
            <p className="text-ivory/40 text-lg">
              No projects in this category yet.
            </p>
          </div>
        ) : (
          filteredProjects.map((project, index) => (
            <div
              key={project._id}
              className="group relative aspect-[16/10] overflow-hidden cursor-pointer cinematic-hover"
              onClick={() => setSelectedProject(project)}
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              {/* Thumbnail */}
              <div className="absolute inset-0">
                {project.thumbnailUrl ? (
                  <img
                    src={project.thumbnailUrl}
                    alt={`${project.title} - ${project.category} project for ${project.client}`}
                    className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                  />
                ) : (
                  <div className="w-full h-full bg-gradient-to-br from-muted to-secondary/20" />
                )}
                {/* Dark overlay */}
                <div className="absolute inset-0 bg-gradient-to-t from-black via-black/50 to-transparent opacity-80 group-hover:opacity-90 transition-opacity duration-500" />
              </div>

              {/* Content Overlay */}
              <div className="absolute inset-0 p-6 flex flex-col justify-end">
                {/* Category & Year */}
                <div className="flex items-center justify-between mb-3 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                  <span className="text-gold text-xs tracking-widest uppercase">
                    {project.category}
                  </span>
                  <span className="text-ivory/60 text-xs">
                    {project.year}
                  </span>
                </div>

                {/* Title */}
                <h3 className="text-2xl font-[family-name:var(--font-playfair)] text-ivory mb-2 transform translate-y-2 group-hover:translate-y-0 transition-transform duration-500">
                  {project.title}
                </h3>

                {/* Client */}
                <p className="text-ivory/70 text-sm mb-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                  {project.client}
                </p>

                {/* Play Icon */}
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-0 group-hover:opacity-100 transition-all duration-500">
                  <div className="w-16 h-16 rounded-full border-2 border-gold flex items-center justify-center">
                    <svg
                      className="w-6 h-6 text-gold ml-1"
                      fill="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path d="M8 5v14l11-7z" />
                    </svg>
                  </div>
                </div>
              </div>

              {/* Film grain overlay */}
              <div className="film-grain absolute inset-0 opacity-30 pointer-events-none" />
            </div>
          ))
        )}
      </div>

      {/* Fullscreen Modal */}
      {selectedProject && (
        <div
          className="fixed inset-0 z-50 bg-black/98 flex items-center justify-center p-4 animate-fade-in"
          onClick={() => setSelectedProject(null)}
        >
          <div
            className="relative w-full max-w-7xl"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Close Button */}
            <button
              onClick={() => setSelectedProject(null)}
              className="absolute -top-16 right-0 text-gold hover:text-ivory text-5xl transition-colors z-10"
            >
              Ã—
            </button>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Video Player */}
              <div className="lg:col-span-2">
                <div className="relative aspect-video bg-black">
                  {selectedProject.videoUrl ? (
                    <video
                      controls
                      autoPlay
                      className="w-full h-full"
                      src={selectedProject.videoUrl}
                    >
                      Your browser does not support the video tag.
                    </video>
                  ) : (
                    <div className="w-full h-full flex items-center justify-center">
                      {selectedProject.thumbnailUrl ? (
                        <img
                          src={selectedProject.thumbnailUrl}
                          alt={`${selectedProject.title} - ${selectedProject.category} project for ${selectedProject.client}`}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="text-center text-ivory/40">
                          <svg className="w-20 h-20 mx-auto mb-4" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M8 5v14l11-7z" />
                          </svg>
                          <p>Video preview coming soon</p>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>

              {/* Project Info */}
              <div className="space-y-6 text-ivory">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-gold text-xs tracking-widest uppercase">
                      {selectedProject.category}
                    </span>
                    <span className="text-ivory/60 text-sm">
                      {selectedProject.year}
                    </span>
                  </div>
                  <h2 className="text-3xl font-[family-name:var(--font-playfair)] text-ivory mb-2">
                    {selectedProject.title}
                  </h2>
                  <p className="text-gold/80 text-sm">
                    {selectedProject.client}
                  </p>
                </div>

                <div className="h-px bg-gold/20" />

                <div>
                  <p className="text-ivory/80 leading-relaxed">
                    {selectedProject.description}
                  </p>
                </div>

                {selectedProject.tags && selectedProject.tags.length > 0 && (
                  <>
                    <div className="h-px bg-gold/20" />
                    <div className="flex flex-wrap gap-2">
                      {selectedProject.tags.map((tag) => (
                        <span
                          key={tag}
                          className="px-3 py-1 text-xs border border-gold/30 text-ivory/70 tracking-wider"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                  </>
                )}

                <div className="pt-4">
                  <div className="text-ivory/60 text-sm">
                    <span className="text-gold">Duration:</span> {selectedProject.duration}
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Film grain */}
          <div className="film-grain absolute inset-0 opacity-20 pointer-events-none" />
        </div>
      )}
    </>
  );
}
